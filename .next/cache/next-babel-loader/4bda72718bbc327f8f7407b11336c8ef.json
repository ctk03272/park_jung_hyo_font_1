{"ast":null,"code":"var _class, _temp;\n\nimport React, { Component } from 'react';\nimport Router from 'next/router';\nimport App from 'next/app';\nimport { observable } from 'mobx';\nimport { observer } from 'mobx-react';\nimport Slider from 'react-rangeslider';\nimport VerticalSlider from \"../components/VerticalSlider\";\nimport HorizontalSlider from \"../components/HorizontalSlider\";\nimport SVG from '../components/SVG';\nimport { ChromePicker } from 'react-color';\nimport moment from 'moment';\nimport store from \"../common/store\";\nimport Backdrop from './Backdrop';\n\nlet Header = observer(_class = (_temp = class Header extends App {\n  constructor(props) {\n    super(props);\n\n    this.__registerAutoFontSize = () => {\n      this.fontSizeTimer = setInterval(() => {\n        if (store.directionFontSize == 'positive') {\n          store.fontSizeState = store.fontSizeState + store.unitFontSize;\n        } else {\n          store.fontSizeState = store.fontSizeState - store.unitFontSize;\n        }\n\n        if (store.fontSizeState >= store.maxFontSize) {\n          store.directionFontSize = 'negative';\n        }\n\n        if (store.fontSizeState <= store.minFontSize) {\n          store.directionFontSize = 'positive';\n        }\n      }, 200 * (100 / store.secondFontSize));\n    };\n\n    this.__registerAutoFontWeight = () => {\n      this.fontWeightTimer = setInterval(() => {\n        if (store.directionFontWeight == 'positive') {\n          store.fontWeightState = store.fontWeightState + store.unitFontWeight;\n        } else {\n          store.fontWeightState = store.fontWeightState - store.unitFontWeight;\n        }\n\n        if (store.fontWeightState >= store.maxFontWeight) {\n          store.directionFontWeight = 'negative';\n        }\n\n        if (store.fontWeightState <= store.minFontWeight) {\n          store.directionFontWeight = 'positive';\n        }\n      }, 200 * (100 / store.secondFontWeight));\n    };\n\n    this.__registerAutoFontLetter = () => {\n      this.fontLetterTimer = setInterval(() => {\n        if (store.directionFontLetterSpacing == 'positive') {\n          store.fontLetterSpacingState = store.fontLetterSpacingState + store.unitFontLetterSpacing;\n        } else {\n          store.fontLetterSpacingState = store.fontLetterSpacingState - store.unitFontLetterSpacing;\n        }\n\n        if (store.fontLetterSpacingState >= store.maxFontLetterSpacing) {\n          store.directionFontLetterSpacing = 'negative';\n        }\n\n        if (store.fontLetterSpacingState <= store.minFontLetterSpacing) {\n          store.directionFontLetterSpacing = 'positive';\n        }\n      }, 200 * (100 / store.secondFontLetterSpacing));\n    };\n\n    this.__registerAutoFontLine = () => {\n      this.fontLineTimer = setInterval(() => {\n        if (store.directionFontLineSpacing == 'positive') {\n          store.fontLineSpacingState = store.fontLineSpacingState + store.unitFontLineSpacing;\n        } else {\n          store.fontLineSpacingState = store.fontLineSpacingState - store.unitFontLineSpacing;\n        }\n\n        if (store.fontLineSpacingState >= store.maxFontLineSpacing) {\n          store.directionFontLineSpacing = 'negative';\n        }\n\n        if (store.fontLineSpacingState <= store.minFontLineSpacing) {\n          store.directionFontLineSpacing = 'positive';\n        }\n      }, 200 * (100 / store.secondFontLineSpacing));\n    };\n\n    this.handleChangeComplete = color => {\n      // this.setState({ fontColorState: color.hex });\n      store.fontColorState = color.hex;\n    };\n\n    this.handleFontSizeChange = event => {\n      //   console.log(event.target.value);\n      // this.setState({ fontSizeState: event  })\n      store.fontSizeState = event;\n    };\n\n    this.handleFontWeightChange = event => {\n      // this.setState({  fontWeightState: value  })\n      store.fontWeightState = event;\n    };\n\n    this.handleFontLetterSpacingChange = event => {\n      //   console.log(event.target.value);\n      // this.setState({  fontLetterSpacingState: event  })\n      store.fontLetterSpacingState = event;\n    };\n\n    this.handleFontLineSpacingChange = event => {\n      //   console.log(event.target.value);\n      // this.setState({ fontLineSpacingState: event  })\n      store.fontLineSpacingState = event;\n    };\n\n    this._toggleFontSizeAuto = event => {\n      if (event == null || event === undefined) {\n        // this.setState({ isFontSizeAuto: !this.state.isFontSizeAuto }) \n        if (store.isFontSizeAuto == true) {\n          clearInterval(this.fontSizeTimer);\n        } else {\n          clearInterval(this.fontSizeTimer);\n\n          this.__registerAutoFontSize();\n        }\n\n        store.isFontSizeAuto = !store.isFontSizeAuto;\n      } else {\n        if (event == true) {\n          // this.setState({ isFontSizeAuto: true }) \n          store.isFontSizeAuto = true;\n        } else {\n          // this.setState({ isFontSizeAuto: false  }) \n          store.isFontSizeAuto = false;\n        }\n      }\n    };\n\n    this._toggleFontWeightAuto = event => {\n      if (event == null || event === undefined) {\n        // this.setState({  isFontWeightAuto: !this.state.isFontWeightAuto }) \n        if (store.isFontWeightAuto == true) {\n          clearInterval(this.fontWeightTimer);\n        } else {\n          clearInterval(this.fontWeightTimer);\n\n          this.__registerAutoFontWeight();\n        }\n\n        store.isFontWeightAuto = !store.isFontWeightAuto;\n      } else {\n        if (event == true) {\n          // this.setState({ isFontWeightAuto: true }) \n          store.isFontWeightAuto = true;\n        } else {\n          // this.setState({   isFontWeightAuto: false }) \n          store.isFontWeightAuto = false;\n        }\n      }\n    };\n\n    this._toggleFontLetterSpacingAuto = event => {\n      if (event == null || event === undefined) {\n        // this.setState({ isFontLetterSpacingAuto: !this.state.isFontLetterSpacingAuto }) \n        if (store.isFontLetterSpacingAuto == true) {\n          clearInterval(this.fontLetterTimer);\n        } else {\n          clearInterval(this.fontLetterTimer);\n\n          this.__registerAutoFontLetter();\n        }\n\n        store.isFontLetterSpacingAuto = !store.isFontLetterSpacingAuto;\n      } else {\n        if (event == true) {\n          // this.setState({ isFontLetterSpacingAuto: true }) \n          store.isFontLetterSpacingAuto = true;\n        } else {\n          // this.setState({  isFontLetterSpacingAuto: false }) \n          store.isFontLetterSpacingAuto = false;\n        }\n      }\n    };\n\n    this._toggleFontLineSpacingAuto = event => {\n      if (event == null || event === undefined) {\n        // this.setState({  isFontLineSpacingAuto: !this.state.isFontLineSpacingAuto }) \n        if (store.isFontLineSpacingAuto == true) {\n          clearInterval(this.fontLineTimer);\n        } else {\n          clearInterval(this.fontLineTimer);\n\n          this.__registerAutoFontLine();\n        }\n\n        store.isFontLineSpacingAuto = !store.isFontLineSpacingAuto;\n      } else {\n        if (event == true) {\n          // this.setState({ isFontLineSpacingAuto: true  }) \n          store.isFontLineSpacingAuto = true;\n        } else {\n          // this.setState({ isFontLineSpacingAuto: false  }) \n          store.isFontLineSpacingAuto = false;\n        }\n      }\n    };\n\n    this._bannerGoItem = index => {\n      this.setState({\n        index_banner_content: index\n      });\n      this.startCount();\n    };\n\n    this.toogleSwitchState = param_onoff => {\n      clearInterval(this.timer);\n\n      if (param_onoff == true) {\n        this.startCount();\n        this.setState({\n          is_banner_animation: true\n        });\n        return;\n      }\n\n      if (param_onoff == false) {\n        this.setState({\n          is_banner_animation: false\n        });\n        return;\n      }\n\n      if (this.state.is_banner_animation == false) {\n        this.startCount();\n        this.setState({\n          is_banner_animation: true\n        });\n      } else {\n        this.setState({\n          is_banner_animation: false\n        }); //geolocation.stopObserving();\n      }\n    };\n\n    this._goPage = (paramRouterName, paramQuery) => {\n      // import Router from 'next/router';\n      // import { withRouter } from 'next/router' //  retrieve the query via the router props, which needs to be injected to Component by using withRouter.\n      Router.push({\n        pathname: paramRouterName // query: { tab : paramQuery }\n\n      });\n    };\n\n    this.__togglePlayAll = () => {\n      if (store.isPlayAll == true) {\n        store.isPlayAll = false;\n        store.isFontSizeAuto = false;\n        store.isFontWeightAuto = false;\n        store.isFontLineSpacingAuto = false;\n        store.isFontLetterSpacingAuto = false;\n\n        if (this.fontSizeTimer) {\n          clearInterval(this.fontSizeTimer);\n        }\n\n        if (this.fontWeightTimer) {\n          clearInterval(this.fontWeightTimer);\n        }\n\n        if (this.fontLetterTimer) {\n          clearInterval(this.fontLetterTimer);\n        }\n\n        if (this.fontLineTimer) {\n          clearInterval(this.fontLineTimer);\n        }\n      } else {\n        store.isPlayAll = true;\n        store.isFontSizeAuto = true;\n        store.isFontWeightAuto = true;\n        store.isFontLineSpacingAuto = true;\n        store.isFontLetterSpacingAuto = true;\n\n        if (store.isFontSizeAuto == false) {\n          clearInterval(this.fontSizeTimer);\n        } else {\n          clearInterval(this.fontSizeTimer);\n\n          this.__registerAutoFontSize();\n        }\n\n        if (store.isFontWeightAuto == false) {\n          clearInterval(this.fontWeightTimer);\n        } else {\n          clearInterval(this.fontWeightTimer);\n\n          this.__registerAutoFontWeight();\n        }\n\n        if (store.isFontLetterSpacingAuto == false) {\n          clearInterval(this.fontLetterTimer);\n        } else {\n          clearInterval(this.fontLetterTimer);\n          setInterval(this.fontLetterTimer);\n\n          this.__registerAutoFontLetter();\n        }\n\n        if (store.isFontLineSpacingAuto == false) {\n          clearInterval(this.fontLineTimer);\n        } else {\n          clearInterval(this.fontLineTimer);\n\n          this.__registerAutoFontLine();\n        }\n      }\n    };\n\n    this.__toggleResetAll = () => {\n      store.isPlayAll = false;\n      store.fontSizeState = store.defaultFontSizeState;\n      store.fontWeightState = store.defaultFontWeightState;\n      store.fontLetterSpacingState = store.defaultFontLetterSpacingState;\n      store.fontLineSpacingState = store.defaultFontLineSpacingState;\n      store.fontColorState = store.defaultFontColorState;\n      store.fontState = store.defaultFontState;\n      store.isPlayAll = false;\n      store.isFontSizeAuto = false;\n      store.isFontWeightAuto = false;\n      store.isFontLineSpacingAuto = false;\n      store.isFontLetterSpacingAuto = false;\n      store.directionFontSize = 'positive'; // negative;\n\n      store.secondFontSize = 100;\n      store.directionFontWeight = 'positive'; // negative;\n\n      store.secondFontWeight = 100;\n      store.directionFontLetterSpacing = 'positive'; // negative;\n\n      store.secondFontLetterSpacing = 100;\n      store.directionFontLineSpacing = 'positive'; // negative;\n\n      store.secondFontLineSpacing = 100;\n\n      if (this.fontSizeTimer) {\n        clearInterval(this.fontSizeTimer);\n      }\n\n      if (this.fontWeightTimer) {\n        clearInterval(this.fontWeightTimer);\n      }\n\n      if (this.fontLetterTimer) {\n        clearInterval(this.fontLetterTimer);\n      }\n\n      if (this.fontLineTimer) {\n        clearInterval(this.fontLineTimer);\n      }\n    };\n\n    this.__toggleSecond = param => {\n      console.log('__toggleSecond');\n      var unit = 0;\n      param == 'font/size' ? unit = store.secondFontSize : null;\n      param == 'font/weight' ? unit = store.secondFontWeight : null;\n      param == 'font/letter-spacing' ? unit = store.secondFontLetterSpacing : null;\n      param == 'font/line-spacing' ? unit = store.secondFontLineSpacing : null;\n\n      if (unit == 100) {\n        unit = 200;\n      } else if (unit == 200) {\n        unit = 300;\n      } else if (unit == 300) {\n        unit = 100;\n      }\n\n      param == 'font/size' ? store.secondFontSize = unit : null;\n      param == 'font/weight' ? store.secondFontWeight = unit : null;\n      param == 'font/letter-spacing' ? store.secondFontLetterSpacing = unit : null;\n      param == 'font/line-spacing' ? store.secondFontLineSpacing = unit : null;\n\n      if (store.isFontSizeAuto == false) {\n        clearInterval(this.fontSizeTimer);\n      } else {\n        clearInterval(this.fontSizeTimer);\n\n        this.__registerAutoFontSize();\n      }\n\n      if (store.isFontWeightAuto == false) {\n        clearInterval(this.fontWeightTimer);\n      } else {\n        clearInterval(this.fontWeightTimer);\n\n        this.__registerAutoFontWeight();\n      }\n\n      if (store.isFontLetterSpacingAuto == false) {\n        clearInterval(this.fontLetterTimer);\n      } else {\n        clearInterval(this.fontLetterTimer);\n        setInterval(this.fontLetterTimer);\n\n        this.__registerAutoFontLetter();\n      }\n\n      if (store.isFontLineSpacingAuto == false) {\n        clearInterval(this.fontLineTimer);\n      } else {\n        clearInterval(this.fontLineTimer);\n\n        this.__registerAutoFontLine();\n      }\n    };\n\n    this.onPrint = () => {\n      const html = document.querySelector('html');\n      const printContents = document.querySelector('.font_display_container').innerHTML;\n      const printDiv = document.createElement('DIV');\n      printDiv.className = 'print-div';\n      html.appendChild(printDiv);\n      printDiv.innerHTML = printContents;\n      document.body.style.display = 'none';\n      window.print();\n      document.body.style.display = 'block';\n      printDiv.style.display = 'none';\n      console.log('TEST');\n    };\n\n    this.state = {\n      layoutMode: 'desktop',\n      input_content: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqestuvwxyz  ',\n      footerGap: 200,\n      fontSizeState: 50,\n      fontWeightState: 300,\n      fontLetterSpacingState: 0,\n      fontLineSpacingState: 0.85,\n      fontColorState: '#000',\n      fontState: null,\n      isFontSizeAuto: false,\n      isFontWeightAuto: false,\n      isFontLetterSpacingAuto: false,\n      isFontLineSpacingAuto: false\n    };\n    this.onResize = this.onResize.bind(this);\n  }\n\n  static async getInitialProps(props) {\n    const {\n      query\n    } = props; // const { token, refreshToken } = query;\n  }\n\n  componentDidMount() {\n    var stored_token = '';\n    window.addEventListener('resize', this.onResize);\n    const wrapper = document.getElementById(\"wrapper\");\n    const mobile_drawer_menu = document.getElementById(\"mobile_drawer_menu\");\n    const mobile_drawer_menu_left = document.getElementById(\"mobile_drawer_menu_left\");\n    const icon = document.getElementsByClassName(\"icon\");\n    wrapper.addEventListener('click', () => {\n      icon[0].classList.toggle('close');\n      mobile_drawer_menu.classList.toggle('open');\n    });\n    mobile_drawer_menu_left.addEventListener('click', () => {\n      icon[0].classList.toggle('close');\n      mobile_drawer_menu.classList.toggle('open');\n    });\n\n    if (this.fontSizeTimer) {\n      clearInterval(this.fontSizeTimer);\n    }\n\n    if (this.fontWeightTimer) {\n      clearInterval(this.fontWeightTimer);\n    }\n\n    if (this.fontLetterTimer) {\n      clearInterval(this.fontLetterTimer);\n    }\n\n    if (this.fontLineTimer) {\n      clearInterval(this.fontLineTimer);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.fontSizeTimer) {\n      clearInterval(this.fontSizeTimer);\n    }\n\n    if (this.fontWeightTimer) {\n      clearInterval(this.fontWeightTimer);\n    }\n\n    if (this.fontLetterTimer) {\n      clearInterval(this.fontLetterTimer);\n    }\n\n    if (this.fontLineTimer) {\n      clearInterval(this.fontLineTimer);\n    }\n  }\n\n  startCount() {\n    // this.setState({\n    //   isOn: true,\n    //   count: 0\n    // });\n    clearInterval(this.timer);\n    this.timer = setInterval(() => {\n      this._bannerChange();\n    }, 5000);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.onResize);\n  }\n\n  onResize() {\n    this.setState({\n      layoutMode: this.getLayoutMode()\n    });\n    const mobile_drawer_menu = document.getElementById(\"mobile_drawer_menu\");\n    const icon = document.getElementsByClassName(\"icon\");\n  }\n\n  getLayoutMode() {\n    return window.innerWidth > 1200 ? 'desktop' : 'non-desktop';\n  }\n\n  render() {\n    const {\n      path\n    } = this.props;\n    const stored_token = store.token;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"style\", {\n      jsx: \"true\",\n      global: \"true\",\n      suppressHydrationWarning: true\n    }, `\n                    @font-face {\n                        font-family: \"Earth_FinalGX\";\n                        src: url(${this.props.prefix}/static/fonts/Earth_FinalGX.ttf) format(\"truetype\");\n                        }\n\n\n                    @font-face {font-family: 'Noto Sans KR';font-style: normal;font-weight: 100;src: url(//fonts.gstatic.com/ea/notosanskr/v2/NotoSansKR-Thin.woff2) format('woff2'),url(//fonts.gstatic.com/ea/notosanskr/v2/NotoSansKR-Thin.woff) format('woff'),url(//fonts.gstatic.com/ea/notosanskr/v2/NotoSansKR-Thin.otf) format('opentype');}\n\n                    @font-face {font-family: 'Noto Sans KR';font-style: normal;font-weight: 300;src: url(//fonts.gstatic.com/ea/notosanskr/v2/NotoSansKR-Light.woff2) format('woff2'),url(//fonts.gstatic.com/ea/notosanskr/v2/NotoSansKR-Light.woff) format('woff'),url(//fonts.gstatic.com/ea/notosanskr/v2/NotoSansKR-Light.otf) format('opentype');}\n                    \n                    @font-face {font-family: 'Noto Sans KR';font-style: normal;font-weight: 400;src: url(//fonts.gstatic.com/ea/notosanskr/v2/NotoSansKR-Regular.woff2) format('woff2'),url(//fonts.gstatic.com/ea/notosanskr/v2/NotoSansKR-Regular.woff) format('woff'),url(//fonts.gstatic.com/ea/notosanskr/v2/NotoSansKR-Regular.otf) format('opentype');}\n                    \n                    @font-face {font-family: 'Noto Sans KR';font-style: normal;font-weight: 500;src: url(//fonts.gstatic.com/ea/notosanskr/v2/NotoSansKR-Medium.woff2) format('woff2'),url(//fonts.gstatic.com/ea/notosanskr/v2/NotoSansKR-Medium.woff) format('woff'),url(//fonts.gstatic.com/ea/notosanskr/v2/NotoSansKR-Medium.otf) format('opentype');}\n                    \n                    @font-face {font-family: 'Noto Sans KR';font-style: normal;font-weight: 700;src: url(//fonts.gstatic.com/ea/notosanskr/v2/NotoSansKR-Bold.woff2) format('woff2'),url(//fonts.gstatic.com/ea/notosanskr/v2/NotoSansKR-Bold.woff) format('woff'),url(//fonts.gstatic.com/ea/notosanskr/v2/NotoSansKR-Bold.otf) format('opentype');}\n                    \n                    @font-face {font-family: 'Noto Sans KR';font-style: normal;font-weight: 900;src: url(//fonts.gstatic.com/ea/notosanskr/v2/NotoSansKR-Black.woff2) format('woff2'),url(//fonts.gstatic.com/ea/notosanskr/v2/NotoSansKR-Black.woff) format('woff'),url(//fonts.gstatic.com/ea/notosanskr/v2/NotoSansKR-Black.otf) format('opentype');}\n                    \n                    \n                          `), /*#__PURE__*/React.createElement(\"style\", {\n      jsx: \"true\",\n      global: \"true\",\n      suppressHydrationWarning: true\n    }, `\n\n                a:link {color: black;}      /* unvisited link */\n                a:visited {color: black;}   /* visited link */\n                a:hover {color: black;}     /* mouse over link */\n                a:active {color: black;}    /* selected link */\n\n                #wrapper {\n                    display:inline-block;\n                    border-radius:50px;\n                    margin:10px;\n                    position: relative;\n                    padding:4px;\n                    cursor:pointer;\n                    z-index: 9999;\n                }\n                .circle {\n                    width:30px;\n                    height:30px;\n                    position:relative;\n                    z-index: 9999;\n                }\n                .line {\n                    position: absolute;\n                    height: 3px;\n                    width:100%;\n                    background: #000;\n                    border-radius:2px;\n                    transition: all cubic-bezier(0.26, 0.1, 0.27, 1.55) 0.35s;\n                }\n                .top {\n                    top:18%;\n                }\n                .middle {\n                    top:48%;\n                }\n                .bottom {\n                    top:78%;\n                }\n                .icon.close .top {\n                    transform:rotate(45deg);\n                    top:48%;\n                }\n                .icon.close .middle, .icon.close .bottom {\n                    transform:rotate(-45deg);\n                    top:48%;\n                }\n                .mobile_drawer_menu {\n                    position : fixed;\n                    display: none;\n                    flex-direction : row;\n                    width: 100%;\n                    height: 100%;\n                    left: 0%;\n                    top: 0;\n                    align-items: center;\n                    justify-content: center;\n                    background: rgba(0, 0, 0, 0.3);\n                    z-index: 9998;\n                }\n                .mobile_drawer_menu_left {\n                    width: calc(100% - 400px);\n                    height: 100%;\n                }\n\n                .mobile_drawer_menu_inner {\n                    width: 400px;\n                    height: 100%;\n                    min-width: 200px;\n                    display: flex;\n                    flex-direction: column;\n                    align-items: flex-start;\n                    justify-content: flex-start;\n                    background-color: #fff;\n                    z-index: 9999;\n                    overflow-y: scroll;\n                }\n                \n\n                .mobile_drawer_menu.open {\n                    display: flex;\n                }\n                .cs-drawer-item {\n\n                    width: auto;\n                    height: 24px;\n                    font-size: 16px;\n                    font-style: normal;\n                    line-height: 1.5;\n                    letter-spacing: -0.64px;\n                    text-align: left;\n                    color: rgba(0, 0, 0, 0.6);\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                    text-align: center;\n                    margin-left: 24px;  \n                    margin-top: 16px;   \n                }\n                .slider-common {\n                    width: calc(100% - 40px);\n                }\n                .rangeslider-horizontal .rangeslider__fill {\n                    height: 100%;\n                    background-color: #000;\n                    border-radius: 10px;\n                    top: 0;\n                }\n                .rangeslider {\n                    margin: 8px 0;\n                    position: relative;\n                    background: #e6e6e6;\n                    -ms-touch-action: none;\n                    touch-action: none;\n                    }\n                .rangeslider {\n                    max-height: 30px;\n                }\n                .rangeslider-horizontal .rangeslider__handle {\n                    width: 10px;\n                    height: 10px;\n                    border-radius: 10px;\n                    top: 50%;\n                    transform: translate3d(-50%,-50%,0);\n                    }\n                .rangeslider-horizontal {\n                    height: 6px;\n                    border-radius: 10px;\n                    }\n                    .rangeslider-horizontal .rangeslider__handle:after {\n                        content: '',\n                        position: absolute;\n                        width: 0px;\n                        height: 0px;\n                        top: 6px;\n                        left: 6px;\n                        border-radius: 50%;\n                        background-color: #dadada;\n                        box-shadow: 0 1px 3px rgba(0,0,0,.4) inset,0 -1px 3px rgba(0,0,0,.4) inset;\n                        }\n                /* Extra small devices (phones, 400px and down) */\n                @media only screen and (min-width: 400px) {\n                    /* ... */\n                    .mobile_drawer_menu.open {\n                        display: flex;\n                    }\n                  }\n                /* Extra small devices (phones, 600px and down) */\n                @media only screen and (max-width: 400px) {\n                  /* ... */\n                  .mobile_drawer_menu.open {\n                      display: flex;\n                  }\n                }\n                /* Small devices (portrait tablets and large phones, 600px and up) */\n                @media only screen and (min-width: 600px) {\n                  /* ... */\n                  .mobile_drawer_menu.open {\n                      display: flex;\n                  }\n                }\n                /* Medium devices (landscape tablets, 768px and up) */\n                @media only screen and (min-width: 768px) {\n                  /* ... */\n                  .mobile_drawer_menu.open {\n                      display: flex;\n                  }\n                }\n                /* Large devices (laptops/desktops, 992px and up) */\n                @media only screen and (min-width: 992px) {\n                  /* ... */\n                  .mobile_drawer_menu.open {\n                      display: flex;\n                  }\n                }\n                /* Extra large devices (large laptops and desktops, 1200px and up) */\n                @media only screen and (min-width: 1200px) {\n                  /* ... */\n                  .mobile_drawer_menu.open {\n                    display: flex;\n                  }\n                }\n            `), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"header\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header-wrapper is_desktop_laptop_tablet_phone_xsmall_xxsmall  max-width-wrapper\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header-left\"\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        position: 'absolute',\n        width: 'auto',\n        display: 'flex',\n        alignSelf: 'center',\n        left: '50%',\n        transform: 'translate(-50%, 0%)'\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: \"/\",\n      style: {\n        fontFamily: \"Earth_FinalGX\"\n      }\n    }, \"PARK JUNG HYO.\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header-right\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"wrapper\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"circle icon\"\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"line top\"\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"line middle\"\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"line bottom\"\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"mobile_drawer_menu\",\n      className: \"mobile_drawer_menu\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"mobile_drawer_menu_left\",\n      style: {\n        width: 'calc(100% - 400px)',\n        height: '100%'\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mobile_drawer_menu_inner\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"menu-item-1\",\n      className: \"menu-item cursor_pointer not_draggable\",\n      style: {\n        fontFamily: \"Earth_FinalGX\",\n        color: path === '/' ? '#f84300' : 'rgba(0, 0, 0, 0.6)',\n        fontWeight: path === '/' ? '600' : '500',\n        textDecoration: path === '/' ? 'underline' : 'none',\n        marginTop: 80,\n        marginLeft: 24\n      },\n      onClick: () => {\n        this._goPage('/');\n      }\n    }, \"PARK JUNG HYO's 1st Planet : Earth\"), /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        fontSize: 20,\n        display: 'flex',\n        alignItems: 'flex-start',\n        justifyContent: 'center',\n        maxWidth: 400,\n        marginLeft: 40,\n        marginTop: 50\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '100%',\n        display: 'flex',\n        marginBottom: 20\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        fontFamily: 'Earth_FinalGX',\n        width: 80,\n        height: 20,\n        fontSize: 10,\n        fontWeight: 700,\n        backgroundColor: store.isPlayAll == true ? '#000' : '#E4E4E4',\n        color: store.isPlayAll == true ? '#fff' : '#000',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderRadius: 8\n      },\n      onClick: () => {\n        this.__togglePlayAll();\n      }\n    }, store.isPlayAll == true ? 'Pause all' : 'Play all'), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        fontFamily: 'Earth_FinalGX',\n        width: 80,\n        height: 20,\n        fontSize: 10,\n        fontWeight: 700,\n        backgroundColor: '#E4E4E4',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        marginLeft: 8,\n        borderRadius: 8\n      },\n      onClick: () => {\n        this.__toggleResetAll();\n      }\n    }, \"Reset\")), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        fontFamily: 'Earth_FinalGX',\n        maxWidth: 225,\n        fontSize: 10,\n        fontWeight: 700\n      }\n    }, \"Font Size\", /*#__PURE__*/React.createElement(Slider, {\n      min: 0,\n      max: 100,\n      value: store.fontSizeState,\n      style: {\n        color: '#000'\n      },\n      onChange: this.handleFontSizeChange\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"auto_row\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"font_value\"\n    }, store.fontSizeState), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        backgroundColor: store.isFontSizeAuto ? '#000' : '#E4E4E4',\n        color: store.isFontSizeAuto ? '#fff' : '#000',\n        width: 80,\n        height: 20,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderRadius: 8,\n        fontSize: 10\n      },\n      onClick: () => {\n        this._toggleFontSizeAuto();\n      }\n    }, store.isFontSizeAuto ? 'Pause' : 'Play'), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        backgroundColor: '#E4E4E4',\n        color: '#000',\n        width: 20,\n        height: 20,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderRadius: 10,\n        fontSize: 10,\n        marginLeft: 5\n      },\n      onClick: () => {\n        this.__toggleSecond('font/size');\n      }\n    }, store.secondFontSize == 100 ? \"x1\" : \"\", store.secondFontSize == 200 ? \"x2\" : \"\", store.secondFontSize == 300 ? \"x3\" : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        backgroundColor: '#E4E4E4',\n        color: '#000',\n        width: 20,\n        height: 20,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderRadius: 10,\n        fontSize: 10,\n        marginLeft: 5\n      }\n    }, \"?\"))), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        fontFamily: 'Earth_FinalGX',\n        maxWidth: 225,\n        fontSize: 10,\n        fontWeight: 700,\n        marginTop: 20\n      }\n    }, \"Font Weight\", /*#__PURE__*/React.createElement(Slider, {\n      min: 100,\n      max: 900,\n      value: store.fontWeightState,\n      style: {\n        color: '#000'\n      },\n      onChangeStart: this.handleChangeStart,\n      onChange: this.handleFontWeightChange\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"auto_row\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"font_value\"\n    }, store.fontWeightState), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        backgroundColor: store.isFontWeightAuto ? '#000' : '#E4E4E4',\n        color: store.isFontWeightAuto ? '#fff' : '#000',\n        width: 80,\n        height: 20,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderRadius: 8,\n        fontSize: 10\n      },\n      onClick: () => {\n        this._toggleFontWeightAuto();\n      }\n    }, store.isFontWeightAuto ? 'Pause' : 'Play'), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        backgroundColor: '#E4E4E4',\n        color: '#000',\n        width: 20,\n        height: 20,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderRadius: 10,\n        fontSize: 10,\n        marginLeft: 5\n      },\n      onClick: () => {\n        this.__toggleSecond('font/weight');\n      }\n    }, store.secondFontWeight == 100 ? \"x1\" : \"\", store.secondFontWeight == 200 ? \"x2\" : \"\", store.secondFontWeight == 300 ? \"x3\" : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        backgroundColor: '#E4E4E4',\n        color: '#000',\n        width: 20,\n        height: 20,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderRadius: 10,\n        fontSize: 10,\n        marginLeft: 5\n      }\n    }, \"?\"))), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        fontFamily: 'Earth_FinalGX',\n        maxWidth: 225,\n        marginTop: 20,\n        fontSize: 10,\n        fontWeight: 700\n      }\n    }, \"Letter Spacing\", /*#__PURE__*/React.createElement(Slider, {\n      min: -0.1,\n      max: 0.2,\n      value: store.fontLetterSpacingState,\n      style: {\n        color: '#000'\n      },\n      onChange: this.handleFontLetterSpacingChange,\n      step: 0.01\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"auto_row\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"font_value\"\n    }, store.fontLetterSpacingState.toFixed(2)), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        backgroundColor: store.isFontLetterSpacingAuto ? '#000' : '#E4E4E4',\n        color: store.isFontLetterSpacingAuto ? '#fff' : '#000',\n        width: 80,\n        height: 20,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderRadius: 8,\n        fontSize: 10\n      },\n      onClick: () => {\n        this._toggleFontLetterSpacingAuto();\n      }\n    }, store.isFontLetterSpacingAuto ? 'Pause' : 'Play'), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        backgroundColor: '#E4E4E4',\n        color: '#000',\n        width: 20,\n        height: 20,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderRadius: 10,\n        fontSize: 10,\n        marginLeft: 5\n      },\n      onClick: () => {\n        this.__toggleSecond('font/letter-spacing');\n      }\n    }, store.secondFontLetterSpacing == 100 ? \"x1\" : \"\", store.secondFontLetterSpacing == 200 ? \"x2\" : \"\", store.secondFontLetterSpacing == 300 ? \"x3\" : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        backgroundColor: '#E4E4E4',\n        color: '#000',\n        width: 20,\n        height: 20,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderRadius: 10,\n        fontSize: 10,\n        marginLeft: 5\n      }\n    }, \"?\"))), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        fontFamily: 'Earth_FinalGX',\n        maxWidth: 225,\n        marginTop: 20,\n        fontSize: 10,\n        fontWeight: 700\n      }\n    }, \"Line Spacing\", /*#__PURE__*/React.createElement(Slider, {\n      min: 0.85,\n      max: 1.5,\n      value: store.fontLineSpacingState,\n      step: 0.01,\n      style: {\n        color: '#000'\n      },\n      onChange: this.handleFontLineSpacingChange\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"auto_row\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"font_value\"\n    }, store.fontLineSpacingState.toFixed(2)), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        backgroundColor: store.isFontLineSpacingAuto ? '#000' : '#E4E4E4',\n        color: store.isFontLineSpacingAuto ? '#fff' : '#000',\n        width: 80,\n        height: 20,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderRadius: 8,\n        fontSize: 10\n      },\n      onClick: () => {\n        this._toggleFontLineSpacingAuto();\n      }\n    }, store.isFontLineSpacingAuto ? 'Pause' : 'Play'), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        backgroundColor: '#E4E4E4',\n        color: '#000',\n        width: 20,\n        height: 20,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderRadius: 10,\n        fontSize: 10,\n        marginLeft: 5\n      },\n      onClick: () => {\n        this.__toggleSecond('font/line-spacing');\n      }\n    }, store.secondFontLineSpacing == 100 ? \"x1\" : \"\", store.secondFontLineSpacing == 200 ? \"x2\" : \"\", store.secondFontLineSpacing == 300 ? \"x3\" : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        backgroundColor: '#E4E4E4',\n        color: '#000',\n        width: 20,\n        height: 20,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderRadius: 10,\n        fontSize: 10,\n        marginLeft: 5\n      }\n    }, \"?\"))), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        fontFamily: 'Earth_FinalGX',\n        fontSize: 10,\n        marginBottom: 10,\n        fontWeight: 700\n      }\n    }, \"Color\", /*#__PURE__*/React.createElement(\"br\", null)), /*#__PURE__*/React.createElement(ChromePicker, {\n      color: store.fontColorState,\n      onChangeComplete: this.handleChangeComplete\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        fontFamily: 'Earth_FinalGX',\n        backgroundColor: '#E4E4E4',\n        color: '#000',\n        width: 80,\n        height: 20,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderRadius: 8,\n        fontSize: 10,\n        marginTop: 45,\n        fontWeight: 600\n      },\n      onClick: () => {\n        this.onPrint();\n      }\n    }, \"Print\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"font_display_controller\"\n    })))))))));\n  }\n\n}, _temp)) || _class;\n\nexport default Header;","map":null,"metadata":{},"sourceType":"module"}